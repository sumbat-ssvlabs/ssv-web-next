(async () => {
  /* eslint-disable @typescript-eslint/no-var-requires */
  /* eslint-disable no-undef */
  const fs = require("fs");
  const path = require("path");
  const prettier = require("prettier");
  const typescriptParser = require("prettier/parser-typescript");
  const babelParser = require("prettier/parser-babel");
  const { isEqual } = await import("lodash-es");

  const mainnetAbi = require("../src/abi/mainnet/v4/setter.json");

  const holeskyAbi = require("../src/abi/holesky/v4/setter.json").filter(
    (item) => {
      const mainnetItem = mainnetAbi.find((f) => f?.name === item?.name);
      return !isEqual(mainnetItem, item);
    }
  );

  const folder = path.join(
    path.dirname(__dirname),
    "src/contract-interactions/write"
  );

  if (!fs.existsSync(folder)) {
    console.log("Creating folder: ", folder);
    fs.mkdirSync(folder, { recursive: true });
  }

  fs.readdirSync(folder).forEach((file) => {
    fs.unlinkSync(path.join(folder, file));
  });

  const writeFns = holeskyAbi.filter(
    (item) =>
      item.type === "function" &&
      item.stateMutability !== "view" &&
      item.stateMutability !== "pure"
  );

  const writeFnsMainnet = mainnetAbi.filter(
    (item) =>
      item.type === "function" &&
      item.stateMutability !== "view" &&
      item.stateMutability !== "pure"
  );

  const createWriteFn = (isTestnet, item) => {
    const functionName = item.name;
    const hookName = `use${capitalizeFirstLetter(functionName)}${isTestnet ? "_Testnet" : ""}`;
    const fileName = `${hookName}.ts`;
    const filePath = path.join(folder, fileName);
    const hasInputs = Boolean(item.inputs?.length);

    const networkName = isTestnet ? "holesky" : "mainnet";

    const isPayable = item.stateMutability === "payable";

    const abiName = isTestnet ? "HoleskyV4SetterABI" : "MainnetV4SetterABI";

    const content = `
// ------------------------------------------------
// This file is auto-generated by createWriteContractQueries.js
// ------------------------------------------------

import { useWriteContract } from "wagmi";
import {useSSVNetworkDetails} from '@/lib/hooks/useSSVNetworkDetails';
import { ${abiName} } from "@/abi/${networkName}/v4/setter";${
      hasInputs
        ? `
  import type { ExtractAbiFunction, AbiParametersToPrimitiveTypes } from "abitype";`
        : ""
    }

${hasInputs ? `type Fn = ExtractAbiFunction<typeof ${abiName}, "${functionName}">;` : ""}

export const ${hookName} = () => {
  const { setterContractAddress } = useSSVNetworkDetails()
 const mutation = useWriteContract();

  const write = (${hasInputs ? 'args: AbiParametersToPrimitiveTypes<Fn["inputs"]>' : ""}${isPayable ? ",value?: bigint" : ""}) => {
    return mutation.writeContract({
    ${isPayable ? "value," : ""}
      abi: ${abiName},
      address: setterContractAddress,
      functionName: "${functionName}",
      ${hasInputs ? "args" : ""}
    });
  };

  return {
    mutation,
    write,
  };
};
`;
    fs.mkdirSync(folder, { recursive: true });
    prettier
      .format(content.trim(), {
        parser: "typescript",
        plugins: [typescriptParser, babelParser],
      })
      .then((prettifiedCode) => {
        fs.writeFileSync(filePath, prettifiedCode);
        console.log(`File created: ${filePath}`);
      });
  };
  writeFnsMainnet.forEach(createWriteFn.bind(null, false));
  writeFns.forEach(createWriteFn.bind(null, true));

  function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
})();
